package Solutions;
/*
 * Author - Alexander Kohler
 * 
 */
public class Problem012 
{
	/*
	 * 
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
	 */
	
	
	//Metrics - Slow
	
	static int generateNthTriangleNumber(int n)
	{
		int i = 0;
		int triNum = 0;
		for (; i <= n; i++)
		{
			triNum = triNum + i;
		}
		return triNum;
	}
	
	static int getNumberOfDivisors(int n)
	{
		int divisorCount = 0;
		for (int i = 1; i <= n; i++)
		{
			if ((n % i) == 0)
				divisorCount++;
		}
		return divisorCount;
	}
	
	static int fiveHundyDivosor()
	{
		int i = 11000;
		while (i < 13000)
		{
			
			if (getNumberOfDivisors(generateNthTriangleNumber(i)) > 200)
				System.out.println(i);
			if (getNumberOfDivisors(generateNthTriangleNumber(i)) > 300)
				System.out.println("3 " + i);
			if (getNumberOfDivisors(generateNthTriangleNumber(i)) > 400)
				System.out.println("4 " + i);
			if (getNumberOfDivisors(generateNthTriangleNumber(i)) > 450)
				System.out.println("450 " + i);
			
			
			if (getNumberOfDivisors(generateNthTriangleNumber(i)) > 500)
			{
				System.out.println(i);
				return generateNthTriangleNumber(i);
			}
			i = i + 1;
		}
		return -1;
	}



	public static void main(String[] args) 
	{
		long startTime = System.currentTimeMillis();
		System.out.println(fiveHundyDivosor());
		long endTime = System.currentTimeMillis();
		System.out.println("That took " + (endTime - startTime) + " milliseconds");
	}

}




